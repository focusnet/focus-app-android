/*
 * The MIT License (MIT)
 * Copyright (c) 2015 Berner Fachhochschule (BFH) - www.bfh.ch
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package eu.focusnet.app.model;

import android.support.annotation.NonNull;

import java.util.ArrayList;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;

import eu.focusnet.app.controller.PriorityTask;
import eu.focusnet.app.model.gson.PageReference;
import eu.focusnet.app.model.gson.PageTemplate;
import eu.focusnet.app.model.gson.ProjectTemplate;
import eu.focusnet.app.model.gson.WidgetReference;
import eu.focusnet.app.model.gson.WidgetTemplate;
import eu.focusnet.app.model.widgets.InvalidWidgetInstance;
import eu.focusnet.app.model.widgets.WidgetInstance;
import eu.focusnet.app.ui.FocusApplication;
import eu.focusnet.app.util.Constant;
import eu.focusnet.app.util.FocusBadTypeException;
import eu.focusnet.app.util.FocusInternalErrorException;
import eu.focusnet.app.util.FocusMissingResourceException;

/**
 * The instantiation of a page template, consisting of widgets. A {@code PageInstance} can have
 * an iterator, too. In this case, one page will be created for each item in the iterator.
 */
public class PageInstance extends AbstractInstance
{
	/**
	 * Page type, i.e. in which category the page belongs.
	 */
	public enum PageType
	{
		DASHBOARD,
		TOOL
	}

	/**
	 * Page template
	 */
	private PageTemplate template;

	/**
	 * Page unique identifier. If the page has an iterator, then the {@code guid} will be updated
	 * once the iterator will have been resolved such that paths can reflect the different between
	 * the different instances generated by this iterator.
	 */
	private String guid;

	/**
	 * Category of the page
	 */
	private PageType type;

	/**
	 * Title of the page
	 */
	private String title;

	/**
	 * Description of the page
	 */
	private String description;

	/**
	 * Tells whether this page is disabled or not. If this is the case, it should be be accessible.
	 */
	private boolean disabled;

	/**
	 * List of widget instances included in this page.
	 */
	private ArrayList<WidgetInstance> widgets;

	/**
	 * C'tor
	 *
	 * @param pageTpl Page template on the top of which we build this instance
	 * @param dataCtx {@link DataContext} being used to resolve data
	 */
	public PageInstance(PageTemplate pageTpl, PageType type, @NonNull DataContext dataCtx)
	{
		super(dataCtx.getDataManager());

		this.template = pageTpl;
		this.guid = null;
		this.type = type;
		this.widgets = new ArrayList<>();
		this.dataContext = dataCtx;
		this.disabled = this.template.isDisabled();

		// register page-specific data to our current data context
		this.dataContext.provideData(this.template.getData());
	}

	/**
	 * Factory to create page instances
	 *
	 * @param projectTemplate The project template to take as a basis for generating the page instances.
	 * @param pageType        The category of page we are interested in
	 * @param parentContext   The {@link DataContext} to use as a basis for data resolution
	 * @return A list of {@link PageInstance}s
	 */
	public static ArrayList<PageInstance> createPageInstances(ProjectTemplate projectTemplate, PageType pageType, DataContext parentContext)
	{
		ArrayList<PageInstance> newPages = new ArrayList<>();

		ArrayList<PageReference> source;
		switch (pageType) {
			case TOOL:
				source = projectTemplate.getTools();
				break;
			case DASHBOARD:
				source = projectTemplate.getDashboards();
				break;
			default:
				throw new FocusInternalErrorException("Invalid Page library.");
		}

		for (PageReference s : source) {
			String pageid = s.getPageid();
			PageTemplate pageTpl = projectTemplate.findPage(pageid);

			// if we have an iterator, this means that we must construct multiple times the same page,
			// but with a different data context each time
			if (pageTpl.getIterator() != null) {
				ArrayList<String> urls;
				try {
					urls = parentContext.resolveToArrayOfUrls(pageTpl.getIterator());
				}
				catch (FocusMissingResourceException | FocusBadTypeException e) {
					// should not happen, but let's continue silently
					FocusApplication.reportError(e);
					continue;
				}

				ArrayList<DataContext> contexts = new ArrayList<>();
				for (String url : urls) {
					DataContext newPageCtx = new DataContext(parentContext);
					newPageCtx.registerIterator(pageTpl.getGuid(), url, true);
					contexts.add(newPageCtx);
				}
				for (DataContext newPageCtx : contexts) {
					PageInstance page = PageInstance.createPageInstance(projectTemplate, pageTpl, pageType, newPageCtx);
					newPages.add(page);
				}
			}
			else {
				// no iterator, render a simple PageInstance
				DataContext newPageCtx = new DataContext(parentContext);
				PageInstance page = PageInstance.createPageInstance(projectTemplate, pageTpl, pageType, newPageCtx);
				newPages.add(page);
			}
		}

		// All template information have been gathered, let's know build the actual
		// objects with real data.
		// We do that AFTER having filled the basic information in the contructor to avoid
		// sequences of datacontext.register() / datacontext.get() that would end up in
		// sequential loading of resources. Also, this function is called outside of the loops
		// for the same reason.
		// Ideally, no datacontext.get() (or resolve()) should occure before this point.
		for (PageInstance pi : newPages) {
			pi.fillWithAcquiredData();
		}

		return newPages;
	}

	/**
	 * Create a single page instance.
	 * <p/>
	 * FIXME the structure of the project/page/widget definition could be improved, hence simplifying these methods.
	 *
	 * @param projectTemplate The project template where the page is defined.
	 * @param pageTpl         The page template on the top of which we create this instance
	 * @param pageType        The category of page to create
	 * @param newPageCtx      The {@link DataContext} of the new page instance
	 * @return A new {@link PageInstance}
	 */
	private static PageInstance createPageInstance(
			ProjectTemplate projectTemplate,
			PageTemplate pageTpl,
			PageType pageType,
			DataContext newPageCtx
	)
	{
		PageInstance page = new PageInstance(pageTpl, pageType, newPageCtx);

		for (WidgetReference wr : pageTpl.getWidgets()) {
			WidgetTemplate wTpl = projectTemplate.findWidget(wr.getWidgetid());

			// we can simply pass the same DataContext as widgets do not augment it (or alter it)
			WidgetInstance wi = WidgetInstance.factory(wTpl, wr.getLayout(), newPageCtx);
			page.addWidget(wi);
		}
		return page;
	}


	/**
	 * Fill the instance with data once they have been acquired.
	 *
	 * @return A {@code Future} to watch.
	 */
	private Future fillWithAcquiredData()
	{
		// post-pone setting information after having fetched all resources related to this object
		Callable todo = new Callable()
		{
			@Override
			public Boolean call() throws Exception
			{
				guid = template.getGuid();
				if (template.getIterator() != null) {
					guid = guid +
							Constant.Navigation.PATH_SELECTOR_OPEN +
							dataContext.getIteratorValue() +
							Constant.Navigation.PATH_SELECTOR_CLOSE;
				}

				try {
					title = dataContext.resolveToString(template.getTitle());
					description = dataContext.resolveToString(template.getDescription());
				}
				catch (FocusMissingResourceException | FocusBadTypeException ex) {
					FocusApplication.reportError(ex);
					return false;
				}

				if (description == null) {
					description = "";
				}

				freeDataContext();
				return true;


				// FIXME widget creation should come here!!!!!!!!
			}
		};

		// priority: just a little bit less than the current data context priority, such that is executed
		// just after all data from the data context have been retrieved
		PriorityTask<Object> future = new PriorityTask<>(this.getDataContext().getPriority()  - Constant.AppConfig.PRIORITY_SMALL_DELTA, todo);
		this.dataManager.executeOnPool(future);
		return future;

	}

	/**
	 * Return the type of page (dashboards or tools or null)
	 *
	 * @return The page type
	 */
	public PageType getType()
	{
		return this.type;
	}

	public ArrayList<WidgetInstance> getWidgets()
	{
		return widgets;
	}

	/**
	 * Get the page title (resolved within the current data context)
	 *
	 * @return The title
	 */
	public String getTitle()
	{
		return title;
	}

	/**
	 * Get the description (resolved within the current data context)
	 *
	 * @return The description or the empty string.
	 */
	public String getDescription()
	{
		return description;
	}

	/**
	 * Add a widget instance to the current page
	 * <p/>
	 * If any of the widget instances is not valid, then the page is considered as not valid
	 * (but it will still be displayed anyway).
	 * <p/>
	 * We never pass invalid widgets to a {@link PageInstance}. Instead, we pass
	 * an {@link InvalidWidgetInstance} that contains a reference to the invalid widget instance.
	 *
	 * @param wi The {@link WidgetInstance} to add.
	 */
	public void addWidget(WidgetInstance wi)
	{
		if (wi instanceof InvalidWidgetInstance) {
			this.markAsInvalid();
		}
		this.widgets.add(wi);
	}

	/**
	 * Inherited.
	 *
	 * @param searchedPath The path to look after.
	 * @return Inherited.
	 */
	@Override
	protected AbstractInstance propagatePathLookup(String searchedPath)
	{
		for (WidgetInstance p : this.widgets) {
			AbstractInstance ret = p.lookupByPath(searchedPath);
			if (ret != null) {
				return ret;
			}
		}
		return null;
	}

	/**
	 * Inherited.
	 *
	 * @param parentPath The parent path on the top of which the new path must be defined.
	 */
	@Override
	public void buildPaths(String parentPath)
	{
		this.path = parentPath
				+ Constant.Navigation.PATH_SEPARATOR
				+ this.type.toString()
				+ Constant.Navigation.PATH_SEPARATOR
				+ this.guid;
		for (WidgetInstance p : this.widgets) {
			p.buildPaths(this.path);
		}
	}

	/**
	 * Tells whether the current instance is disabled.
	 *
	 * @return {@code true} if this is the case, {@code false} otherwise.
	 */
	public boolean isDisabled()
	{
		return disabled;
	}


}
